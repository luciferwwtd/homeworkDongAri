프로세스 : 프로세스 내에서 실제로 작업을 수행 중인 프로세스의 하위단위로, 하나의 프로세스 내에는 여러 개의 스레드가 동작
데몬 스레드 : 스레드는 두 가지 모드 : 메인 작업을 위한 스레드와 백 그라운드 작업을 위한 스레드이며, 모든 프로그램은 하나의 메인 스레드로 동작한다.
백 그라운드 작업은 데몬으로 실행하지 않으면, 백 그라운드 작업이 종료될 때 까지 메인 프로그램이 종료되지 않음.
모니터링 및 부수적인 작업은 데몬 스레드, 필수적인 메인 작업은 일반 스레드.

[실습코드 - 함수로 실행]


import threading
import time
 
def worker(msg, slow):
    print("%s 실행 중 : %s" % (threading.currentThread().getName(), msg))
    time.sleep(slow)
    print("%s 종료" % threading.currentThread().getName())
 
def main():
    t = 3
    for i in range(10):
        """ target은 스레드로 실행될 함수이름, name은 스레드 이름으로 'threading.currentThread().getName()'으로 확인 가능, args는 함수에 전달될 매개변수 """
        msg = "함수형 스레드 %d" % i
        th = threading.Thread(target=worker, name="[스레드 이름 %d]" % i, args=(msg, t))
        th.start()  # 생성한 스레드를 시작한다
 
if __name__ == "__main__":
    main()
    

[실습코드 - 클래스로 실행]


import threading
import time
 
""" 클래스 생성시 threading.Thread를 상속 """
class Worker(threading.Thread):
    def __init__(self, args, name=""):
        """ 생성자에서 threading.Thread를 초기화 """
        super().__init__()
        self.name = name
        self.args = args
 
    """ start()시 수행 """
    def run(self):
        print("{} 실행 중 : {}".format(threading.currentThread().getName(), self.args))
        time.sleep(3)
        print("{} 종료".format(threading.currentThread().getName()))
 
def main():
    for i in range(10):
        msg = "함수형 스레드 {}".format(i)
        """ threading.Thread 대신, 클래스명으로 스레드 객체 생성 """
        th = Worker(name="[스레드 이름 {}]".format(i), args=msg)
        th.start()  # run()이 수행
 
if __name__ == "__main__":
    main()


[데몬 스레드 실습코드]


import threading
import time
 
def worker(msg):
    print("{} 실행 중 : {}".format(threading.currentThread().getName(), msg))
    time.sleep(3)
    print("{} 종료".format(threading.currentThread().getName())) # 스레드가 종료되지 않아 출력 안됨
 
def main():
    """ target은 스레드로 실행될 함수이름, name은 스레드 이름으로 'threading.currentThread().getName()'으로 확인 가능, args는 함수에 전달될 매개변수 """
    msg = "함수형 스레드 {}".format(1)
    th = threading.Thread(target=worker, name="[스레드 이름 {}]".format(1), args=(msg,))
    th.setDaemon(True) # 추가된 부분
    th.start()  # 생성한 스레드를 시작한다
 
    print("메인 스레드 종료") # 메인 프로그램이 종료되면서 데몬 스레드들은 남아있음
if __name__ == "__main__":
    main()
    
    
[데몬 스레드 실습코드 - 응용]


import threading
import time
 
def worker(msg):
    print("{} 실행 중 : {}".format(threading.currentThread().getName(), msg))
    time.sleep(3)
    print("{} 종료".format(threading.currentThread().getName())) # 스레드가 종료되지 않아 출력 안됨
 
def main():
    """ target은 스레드로 실행될 함수이름, name은 스레드 이름으로 'threading.currentThread().getName()'으로 확인 가능, args는 함수에 전달될 매개변수 """
    msg = "함수형 스레드 {}".format(1)
    th = threading.Thread(target=worker, name="[스레드 이름 {}]".format(1), args=(msg,))
    th.setDaemon(True) # 추가된 부분
    th.start()  # 생성한 스레드를 시작한다
    th.join()   # 스레드가 종료될 때 까지 기다렸다가 메인 스레드가 수행
 
    print("메인 스레드 종료") # 메인 프로그램이 종료되면서 데몬 스레드들이 자동으로 종료
if __name__ == "__main__":
    main()
